@use 'Foundation/base'; //@use로 base를 사용하겠다고 선언

$font-stack: Helvetica, sans-serif;
$primary-color: red;

.font {
  font: 100% $font-stack;
  color: $primary-color;
}

.text{
  font: 100% $font-stack;
}

nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}

.inverse {
  background-color: base.$primary-color;  //base의 primary color사용
  color: white;
}

@mixin theme($theme: DarkGray) {
  background: $theme;
  box-shadow: 0 0 1px rgba($theme, .25);
  color: #fff;
}

.info {
  @include theme;
}
.alert {
  @include theme($theme: DarkRed);
}
.success {
  @include theme($theme: DarkGreen);
}

/* This CSS will print because %message-shared is extended. */
%message-shared {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

// This CSS won't print because %equal-heights is never extended.
%equal-heights {
  display: flex;
  flex-wrap: wrap;
}

.message {
  @extend %message-shared;
}

.success {
  @extend %message-shared;
  border-color: green;
}

.error {
  @extend %message-shared;
  border-color: red;
}

.warning {
  @extend %message-shared;
  border-color: yellow;
}

@mixin avatar($size, $circle: false) {
  width: $size;
  height: $size;
  background-color: aqua;

  @if $circle {
    border-radius: $size / 2;
  }
}

.square-av {
  @include avatar(100px, $circle: false);
}
.circle-av {
  @include avatar(100px, $circle: true);
}

@function pow($base, $exponent) {
  $result: 1;
  @for $_ from 1 through $exponent {  //exponent만큼
    $result: $result * $base;   //base를 곱함
  }
  @return $result;
}

.sidebar {
  float: left;
  margin-left: pow(4, 3) * 1px; //margin을 4^3으로
}

@mixin reflexive-position($property, $value) {
  @if $property != left and $property != right {    //property prop으로 left또는 right가 아닌 다른 것이 넘어오면
    @error "Property #{$property} must be either left or right.";   //error를 발생시킨다.
  }

  $left-value: if($property == right, initial, $value);
  $right-value: if($property == right, $value, initial);

  left: $left-value;
  right: $right-value;
  [dir=rtl] & {
    left: $right-value;
    right: $left-value;
  }
}

.sidebar {
  @include reflexive-position(left, 12px); //고의로 top을 넣어서 에러를 발생 시킴
  //       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // Error: Property top must be either left or right.  //이런 에러메시지가 발생
}

@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;   //#{}을 사용해서 $prefix와 $property의 값을 문자열로 꺼내와서 사용
  }
  #{$property}: $value;
}

.gray {
  @include prefix(filter, grayscale(50%), moz webkit o ms);
}

.button{
  @include prefix(background, linear-gradient(red, yellow), moz webkit o ms)
}

@mixin inline-animation($duration) {
  $name: inline-#{unique-id()}; //unique-id 생성

  @keyframes #{$name} {
    @content;
  }

  animation-name: $name;
  animation-duration: $duration;
  animation-iteration-count: infinite;
}

.pulse {
  @include inline-animation(2s) {
    from { background-color: yellow }
    to { background-color: red }
  }
}